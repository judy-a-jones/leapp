---
# This is a LEGACY play! This play has been split
# into several smaller chunks that are utilized in
# an AAP workflow

- name: "Upgrade from RHEL 8.10 to RHEL 9.4 via LEAPP"
  hosts: "{{ upgrade_hosts }}"
  become: true
  tasks:
    # https://access.redhat.com/articles/4263361?extIdCarryOver=true&sc_cid=701f2000001OH7JAAW
    - name: "Assert that we're on RHEL 8.10"
      ansible.builtin.assert:
        that: "ansible_distribution_version == '8.10'"

    - name: "Assert that vm_uuid is defined in the AAP inventory '{{ awx_inventory_name }}' and non-empty"
      ansible.builtin.assert:
        that:
          - vm_uuid id defined
          - vm_uuid|length > 0

    - name: "Set facts for Nutanix hosts"
      when: inventory_hostname in groups['nutanix']
      block:
        - name: "Set Nutanix element"
          ansible.builtin.set_fact:
            nutanix_element: "{{ datacenter | replace('central','element') }}"

        - name: "Set Nutanix api"
          ansible.builtin.set_fact:
            nutanix_api: "https://{{ nutanix_element }}:9440/PrismGateway/services/rest/v2.0"

    - name: "Schedule four hours of downtime for hosts in Nagios"
      loop:
        - host
        - all
      loop_control:
        loop_var: service
        label: "Setting {{ service }} downtime for {{ ansible_hostname }} in {{ nagios_host }}"
      vars:
        downtime_comment: "LEAPP Upgrade via AAP JID {{ awx_job_id }} ran by {{ awx_user_first_name }} {{ awx_user_last_name }}"
      delegate_to: "{{ nagios_host }}"
      community.general.nagios:
        action: downtime
        minutes: 240
        service: '{{ service }}'
        host: '{{ ansible_hostname }}'
        comment: '{{ downtime_comment }}'

          # add task to validate downtime

#- name: "Validate downtimes in {{ nagios_url }}"
#  register: current_downtimes
#  vars:
#    patch_host_downtimes: |-
#      {%- set patch_host_downtimes = [] -%}
#      {%- for downtime in current_downtimes.json.scheduleddowntime -%}
#        {%- if (downtime.host_name in target_hosts) and
#               (awx_user_first_name in downtime.author_name) and
#               (awx_user_last_name in downtime.author_name) and
#               (downtime_comment in downtime.comment_data) and
#               (downtime.service_description == "") -%}
#          {%- set _ = patch_host_downtimes.append(downtime) -%}
#        {%- endif -%}
#      {%- endfor -%}
#      {{ patch_host_downtimes }}
#  until: patch_host_downtimes|length == target_hosts|length
#  retries: 200
#  delay: 15
#  when: schedule_downtime.changed
#  ansible.builtin.uri:
#    url: "{{ nagios_url }}/objects/downtime?apikey={{ nagios_api_token }}&pretty=1"

    - name: "Take a snapshot in VCenter"
      when: inventory_hostname in groups['vmware']
      delegate_to: localhost
      block:
       - name: "Delete old VCenter snapshots for {{ inventory_hostname }}"
         community.vmware.vmware_guest_snapshot:
           hostname: "{{ hostname }}"
           datacenter: "{{ datacenter_name }}"
           username: "{{ vsphere_username }}"
           password: "{{ vsphere_password }}"
           uuid: "{{ vm_uuid }}"
           state: remove_all
           validate_certs: false

       - name: "Take a VCenter snapshot of {{ inventory_hostname }}"
         community.vmware.vmware_guest_snapshot:
           hostname: "{{ hostname }}"
           datacenter: "{{ datacenter_name }}"
           username: "{{ vsphere_username }}"
           password: "{{ vsphere_password }}"
           uuid: "{{ vm_uuid }}"
           snapshot_name: pre_leap_upgrade
           validate_certs: false

    - name: "Take a snapshot in Nutanix"
      when: inventory_hostname in groups['nutanix']
      block:
        - name: "Get any existing snapshots in Nutanix"
          register: old_vm_snapshots
          ansible.builtin.uri:
            url: '{{ nutanix_api }}/snapshots/?vm_uuid={{ vm_uuid }}'
            headers:
              Accept: application/json
            force_basic_auth: true
            url_username: "{{ nutanix_username }}"
            url_password: "{{ nutanix_password }}"
            validate_certs: false

        - name: "Delete old Nutanix snapshots for {{ inventory_hostname }}"
          loop: "{{ old_vm_snapshots.json.entities }}"
          loop_control:
            loop_var: snapshot
            label: "Deleting snapshot uuid {{ snapshot.uuid }}"
          register: delete_snapshots
          ansible.builtin.uri:
            url: '{{ nutanix_api }}/snapshots/{{ snapshot.uuid }}?logical_timestamp={{ snapshot.logical_timestamp }}'
            method: DELETE
            headers:
              Accept: application/json
            force_basic_auth: true
            url_username: "{{ nutanix_username }}"
            url_password: "{{ nutanix_password }}"
            validate_certs: false
            status_code: 201

        - name: "Wait for Nutanix snapshots to delete"
          loop: "{{ delete_snapshots.results }}"
          loop_control:
            loop_var: snapshot
            label: "{{ snapshot.json.task_uuid }} is complete"
          register: vm_snapshot_delete_poll
          until: '"Succeeded" in vm_snapshot_delete_poll.json.progress_status'
          retries: 150
          delay: 2
          ansible.builtin.uri:
            url: '{{ nutanix_api }}/tasks/{{ snapshot.json.task_uuid }}'
            headers:
              Accept: application/json
            force_basic_auth: true
            url_username: "{{ nutanix_username }}"
            url_password: "{{ nutanix_password }}"
            validate_certs: false

        - name: "Take a Nutanix snapshot of {{ inventory_hostname }}"
          register: vm_snapshot
          ansible.builtin.uri:
            url: '{{ nutanix_api }}/snapshots/'
            method: POST
            body:
              snapshot_specs:
                - snapshot_name: api_test
                  vm_uuid: "{{ vm_uuid }}"
            body_format: json
            headers:
              Accept: application/json
            force_basic_auth: true
            url_username: "{{ nutanix_username }}"
            url_password: "{{ nutanix_password }}"
            validate_certs: false
            status_code: 201

        - name: "Check on Nutanix snapshot uuid {{ vm_snapshot.json.task_uuid }}"
          register: vm_snapshot_poll
          until: '"Succeeded" in vm_snapshot_poll.json.progress_status'
          retries: 150
          delay: 2
          ansible.builtin.uri:
            url: '{{ nutanix_api }}/tasks/{{ vm_snapshot.json.task_uuid }}'
            headers:
              Accept: application/json
            force_basic_auth: true
            url_username: "{{ nutanix_username }}"
            url_password: "{{ nutanix_password }}"
            validate_certs: false

    - name: "Remove any older versions of LEAPP"
      ansible.builtin.package:
        name: "*leapp*"
        state: absent

    - name: "Remove LEAPP config files at /etc/leapp/files/*json"
      ansible.builtin.file:
        path: "/etc/leapp/files/*json"
        state: absent

    - name: "Unbind host from Satellite"
      loop:
        - "subscription-manager remove --all"
        - "subscription-manager unregister"
        - "subscription-manager clean"
        - "dnf erase -y katello-*"
        - "dnf clean all"
        - "rm -rf /var/cache/dnf/*"
        - "curl -k --output /tmp/katello-ca-consumer-latest.noarch.rpm https://{{ satellite }}/pub/katello-ca-consumer-latest.noarch.rpm"
        - "dnf install -y /tmp/katello-ca-consumer-latest.noarch.rpm"
      loop_control:
        label: "Running `{{ item }}`"
      ignore_errors: true
      ansible.builtin.shell: "{{ item }}"
  
    - name: "Bind host to Satellite server with RHEL9.4 LEAPP key"
      community.general.redhat_subscription:
        activationkey: "rhel8-rhel9.4-leapp"
        org_id: "{{ org }}"
        force_register: true

    # https://access.redhat.com/solutions/5118641       
    - name: "Ensure Default Organization View content view"
      theforeman.foreman.host:
        username: "{{ awx_user_name }}"
        password: "{{ user_sat_password }}"
        server_url: "https://{{ satellite }}"
        organization: "{{ org }}"
        name: "{{ inventory_hostname }}"
        validate_certs: false
        content_source: "{{ satellite }}"
        lifecycle_environment: "Library"
        content_view: "Default Organization View"
  
    - name: "Refresh subscription to pull in new repos"
      ansible.builtin.shell: "dnf clean all && subscription-manager refresh && yum repolist -v"

    - name: "Pin RHEL8 release"
      community.general.rhsm_release:
        release: "8"

    - name: "Update existing packages"
      ansible.builtin.package:
        name: "*"
        state: latest
  
    - name: "Install leapp-upgrade-el8toel9 RPM, which manages the upgrade process"
      ansible.builtin.package:
        name: leapp-upgrade-el8toel9
  
    - name: "Remove any application version locks"
      ansible.builtin.command: "dnf versionlock clear"

    - name: "Remove any packages that are incompatible with the upgrade"
      ansible.builtin.package:
        name:
          - etckeeper # complained about etckeeper post-install would fail during preupgrade check
        state: absent
 
        # Failed because /etc/firewalld/firewalld.conf wasn't available. Try after rebuild
        #    - name: Disable zone drifting in the firewall
        #      ansible.builtin.replace:
        #        path: "/etc/firewalld/firewalld.conf"
        #        regexp: "AllowZoneDrifting"
        #        replace: "#AllowZoneDrifting"
   
    # Ran into an issue on fresh builds where installed kernel is newer than the booted kernel 11/7/24 jhuffma1
    - name: "Check currently booted kernel"
      register: current_kernel
      ansible.builtin.command: "uname -r"

    - name: "Check default kernel"
      register: default_kernel
      ansible.builtin.command: "grubby --default-kernel"

    - name: "Reboot {{ inventory_hostname }} into the newest available kernel"
      when: current_kernel.stdout not in default_kernel.stdout
      ansible.builtin.reboot:

    - name: "Check selinux state"
      register: selinux
      ansible.builtin.shell: "sestatus | grep 'Mode from config file' | awk '{print $NF}'"

    - name: "Check selinux policy"
      register: selinux_type
      ansible.builtin.shell: "sestatus | grep 'Loaded policy name' | awk '{print $NF}'"

    # https://access.redhat.com/solutions/7003083
    - name: "Permit root login on RHEL 9"
      register: permit_root_login
      ansible.builtin.lineinfile:
        regexp: "^PermitRootLogin yes"
        line: "PermitRootLogin yes    #rootlogin is required"
        path: "/etc/ssh/sshd_config"

    - name: "Restart sshd service"
      when: permit_root_login.changed
      ansible.builtin.service:
        name: sshd
        state: restarted
  
    # https://access.redhat.com/articles/3078#RHEL9
    # https://access.redhat.com/solutions/6878881 - ulimit change
    - name: "Pre-upgrade check with Leapp"
      register: preupgrade_check
      failed_when: preupgrade_check.rc != 0
      ansible.builtin.shell: "ulimit -n 16384 && leapp preupgrade --target 9.4"

    - name: "Read pre-upgrade report into memory"
      register: leapp_preupgrade
      ansible.builtin.command: "cat /var/log/leapp/leapp-report.json"

    - name: "Convert pre-upgrade report into vars"
      ansible.builtin.set_fact:
        pre_upgrade_report: "{{ leapp_preupgrade.stdout | from_json }}"

    - name: "Print out pre-upgrade report"
      loop: "{{ pre_upgrade_report.entries }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.title }}"
      ansible.builtin.debug:
        msg: "{{ entry }}"

    # Need to split this into phases in a workflow template to wait on user approval for the above report
  
    # Pre-upgrade mitigation fixes here?
    # Maria db migration - https://access.redhat.com/articles/6743671
  
    # https://access.redhat.com/solutions/6878881 - ulimit change
    - name: "Upgrade to RHEL 9.4 with Leapp"
      register: leapp_upgrade
      async: 1000
      poll: 0
      ansible.builtin.shell: "ulimit -n 16384 && leapp upgrade --debug --reboot --target 9.4 2>&1"

    - name: "Check on upgrade"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 10
      ignore_errors: true #This errors out when leapp reboots the machine
      ignore_unreachable: true
      ansible.builtin.async_status:
        jid: "{{ leapp_upgrade.ansible_job_id }}"

    - name: "Wait for connection to {{ inventory_hostname }}"
      ansible.builtin.wait_for_connection:
        timeout: 3600 #Reboot takes a while

    - name: "Read upgrade report into memory"
      register: leapp_upgrade
      ansible.builtin.command: "cat /var/log/leapp/leapp-report.json"

    - name: "Convert upgrade report into vars"
      ansible.builtin.set_fact:
        upgrade_report: "{{ leapp_preupgrade.stdout | from_json }}"

    - name: "Print out upgrade report"
      loop: "{{ upgrade_report.entries }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.title }}"
      ansible.builtin.debug:
        msg: "{{ entry }}"

    - name: "Check cat /etc/redhat-release"
      register: redhat_release_check
      ansible.builtin.command: "cat /etc/redhat-release"
  
    - name: "Check uname -r"
      register: uname_check
      ansible.builtin.command: "uname -r"
  
    - name: "Check subscription manager"
      register: subscription_check
      ansible.builtin.shell: "sudo subscription-manager list --installed | grep Version | awk '{print $NF}'"
  
    - name: "Fail if any check failed"
      when: ('"Red Hat Enterprise Linux release 9.4 (Plow)" not in redhat_release_check') or
            ('"5.14.0-427.40.1.el9_4.x86_64" not in uname_check') or
            ('"9.4" not in subscription_check')
      block:
        - name: "Restore Nutanix snapshot"
          when: inventory_hostname in groups['nutanix']
          block:
            - name: "Restore Nutanix snapshot uuid {{ snapshot_uuid }}"
              vars:
                snapshot_uuid: |-
                  {%- for entity in vm_snapshot_poll.json.entity_list -%}
                    {%- if "Snapshot" in entity.entity_type -%}
                  {{ entity.entity_id }}
                    {%- endif -%}
                  {%- endfor -%}
              register: snapshot_restore
              ansible.builtin.uri:
                url: '{{ nutanix_api }}/vms/{{ vm_uuid }}/restore'
                method: POST
                body:
                  restore_network_configuration: true
                  snapshot_uuid: '{{ snapshot_uuid }}'
                  uuid: '{{ vm_uuid }}'
                body_format: json
                headers:
                  Accept: application/json
                force_basic_auth: true
                url_username: "{{ nutanix_username }}"
                url_password: "{{ nutanix_password }}"
                validate_certs: false
                status_code: 201
    
            - name: "Check on Nutanix snapshot restore task id {{ snapshot_restore.json.task_uuid }}"
              register: snapshot_restore_check
              until: '"Succeeded" in snapshot_restore_check.json.progress_status'
              retries: 150
              delay: 2
              delegate_to: localhost
              ansible.builtin.uri:
                url: '{{ nutanix_api }}/tasks/{{ snapshot_restore.json.task_uuid }}'
                headers:
                  Accept: application/json
                force_basic_auth: true
                url_username: "{{ nutanix_username }}"
                url_password: "{{ nutanix_password }}"
                validate_certs: false
    
            - name: "Power {{ inventory_hostname }} back on in Nutanix"
              delegate_to: localhost
              nutanix.ncp.ntnx_vms:
                state: power_on
                vm_uuid: "{{ vm_uuid }}"
                nutanix_host: "{{ nutanix_element }}"
                nutanix_username: "{{ nutanix_username }}"
                nutanix_password: "{{ nutanix_password }}"
                validate_certs: false

            - name: "Wait for connection to {{ inventory_hostname }} in Nutanix"
              ansible.builtin.wait_for_connection:

        - name: "Restore VCenter snapshot"
          when: inventory_hostname in groups['vmware']
          block:
            - name: "Revert {{ inventory_hostname }} back to VCenter snapshot"
              delegate_to: localhost
              community.vmware.vmware_guest_snapshot:
                hostname: "{{ hostname }}"
                datacenter: "{{ datacenter_name }}"
                username: "{{ vsphere_username }}"
                password: "{{ vsphere_password }}"
                uuid: "{{ vm_uuid }}"
                state: revert
                snapshot_name: pre_leap_upgrade
                validate_certs: false

            - name: "Power {{ inventory_hostname }} back on in VCenter"
              delegate_to: localhost
              community.vmware.vmware_guest_powerstate:
                hostname: "{{ hostname }}"
                username: "{{ vsphere_username }}"
                password: "{{ vsphere_password }}"
                uuid: "{{ vm_uuid }}"
                state: powered-on
                validate_certs: false

            - name: "Wait for connection to {{ inventory_hostname }} in VCenter"
              ansible.builtin.wait_for_connection:

    - name: "Ensure that selinux matches the pre-upgrade config"
      ansible.posix.selinux:
        state: "{{ selinux.stdout }}"
        policy: "{{ selinux_type.stdout }}"
  
    - name: "Unbind host from Satellite to remove LEAPP content view"
      loop:
        - "subscription-manager remove --all"
        - "subscription-manager unregister"
        - "subscription-manager clean"
        - "dnf erase -y katello-ca-consumer-*"
        - "dnf clean all"
        - "rm -rf /var/cache/dnf/*"
        - "curl -k --output /tmp/katello-ca-consumer-latest.noarch.rpm https://{{ satellite }}/pub/katello-ca-consumer-latest.noarch.rpm"
        - "dnf install -y /tmp/katello-ca-consumer-latest.noarch.rpm"
      loop_control:
        label: "Running `{{ item }}`"
      ignore_errors: true
      ansible.builtin.shell: "{{ item }}"
  
    - name: "Bind System to Satellite Server"
      ansible.builtin.include_role:
        name: bind_to_satellite

    - name: "Delete downtime for hosts in Nagios"
      loop:
        - host
        - all
      loop_control:
        loop_var: service
        label: "Deleted {{ service }} downtime for {{ ansible_hostname }} in {{ nagios_host }}"
      vars:
        downtime_comment: "Completed LEAPP upgrade via AAP JID {{ awx_job_id }} ran by {{ awx_user_first_name }} {{ awx_user_last_name }}"
      delegate_to: "{{ nagios_hostname }}"
      community.general.nagios:
        action: delete_downtime
        service: '{{ service }}'
        host: '{{ ansible_hostname }}'
        comment: '{{ downtime_comment }}'
...
